{
  "$schema": "https://json.schemastore.org/eslintrc.json",
  "plugins": [
    "@typescript-eslint",
    "import",
    "react",
    "simple-import-sort",
    "vitest"
  ],
  "parserOptions": {
    "parser": "@typescript-eslint/parser",
    "project": "./tsconfig.json"
  },
  "extends": [
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:import/recommended",
    "plugin:import/typescript",
    "plugin:react-hooks/recommended",
    "plugin:react/recommended",
    "prettier",
    "plugin:testing-library/react",
    "plugin:vitest/recommended"
  ],
  "rules": {
    // Don't require explicit React import
    "react/react-in-jsx-scope": "off",
    "react/no-unknown-property": "off",
    "react/prop-types": "off",
    "react/jsx-no-target-blank": "off",
    // sort imports
    "import/order": "error",
    // no let exports
    "import/no-mutable-exports": "error",
    "import/no-cycle": "error",
    "import/no-default-export": "error",
    // allow {} even though it's unsafe but comes handy
    "@typescript-eslint/ban-types": [
      "error",
      {
        "types": {
          "{}": false
        }
      }
    ],
    // Server Actions `action={…}`
    "@typescript-eslint/no-misused-promises": [
      "error",
      {
        "checksVoidReturn": {
          "attributes": false
        }
      }
    ],
    "@typescript-eslint/consistent-type-imports": [
      "error",
      {
        "prefer": "type-imports",
        "fixStyle": "inline-type-imports",
        "disallowTypeAnnotations": false
      }
    ],
    "import/no-duplicates": [
      "error",
      {
        "prefer-inline": true
      }
    ],
    // disallow import from next/router
    "no-restricted-imports": [
      "error",
      "next/router"
    ],
    // false negatives
    "import/namespace": [
      "off"
    ],
    // we allow empty interfaces
    "no-empty-pattern": "off",
    "@typescript-eslint/no-empty-interface": "off",
    // we allow empty functions
    "@typescript-eslint/no-empty-function": "off",
    // we sometimes use async functions that don't await anything
    "@typescript-eslint/require-await": "off",
    // make sure to `await` inside try…catch
    "@typescript-eslint/return-await": [
      "error",
      "in-try-catch"
    ],
    // allow unused vars prefixed with `_`
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_"
      }
    ],
    // numbers and booleans are fine in template strings
    "@typescript-eslint/restrict-template-expressions": [
      "error",
      {
        "allowNumber": true,
        "allowBoolean": true
      }
    ],
    // allow non-exhaustive hook deps
    "react-hooks/exhaustive-deps": "off"
  },
  "overrides": [
    {
      "files": [
        "src/app/**/*.ts?(x)"
      ],
      "rules": {
        "import/no-default-export": "off"
      }
    }
  ],
  "settings": {
    "react": {
      "version": "detect"
    },
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true
      }
    }
  },
  "ignorePatterns": [
    "*.js",
    "*.jsx",
    "dist",
    "src/tests/setup.ts"
  ]
}
